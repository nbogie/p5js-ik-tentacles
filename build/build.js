"use strict";
var Palette = (function () {
    function Palette() {
    }
    Palette.getColors = function () {
        return [
            color(250, 105, 0),
            color(105, 210, 231),
            color(167, 219, 216),
            color(243, 134, 48)
        ];
    };
    Palette.randomColor = function () {
        return random(Palette.getColors());
    };
    return Palette;
}());
var Particle = (function () {
    function Particle(pos) {
        this.pos = pos.copy();
    }
    Particle.prototype.draw = function () {
        noStroke();
        fill("black");
        rectMode(CENTER);
        square(this.pos.x, this.pos.y, 3);
        fill(0, 20);
    };
    Particle.prototype.setPosition = function (pos) {
        this.pos.x = pos.x;
        this.pos.y = pos.y;
    };
    Particle.createRandom = function () {
        return new Particle(randomScreenPosition());
    };
    return Particle;
}());
function randomColor() {
    colorMode(HSB, 100);
    return color(random(100), 100, 100);
}
var Segment = (function () {
    function Segment(id, a, b, target, thicknessScale, maxThickness, myHue) {
        this.id = id;
        this.a = a.copy();
        this.b = b.copy();
        this.isFixed = false;
        this.len = a.dist(b);
        colorMode(HSB, 100);
        this.target = target;
        this.myHue = myHue;
        var sat = 50;
        var bright = 50;
        this.myColor = color(this.myHue, sat, random(bright - 10, bright + 10));
        this.edgeColor = color(this.myHue, sat, bright - 20);
        this.thickness = thicknessScale * maxThickness * random(0.9, 1.1);
        this.targetColor = randomColor();
    }
    Segment.prototype.pos = function () {
        return this.a.copy();
    };
    Segment.prototype.getAngle = function () {
        return this.b
            .copy()
            .sub(this.a)
            .heading();
    };
    Segment.prototype.translate = function (offset) {
        this.a.add(offset);
        this.b.add(offset);
    };
    Segment.prototype.drawShadow = function () {
        var off = createVector(20, 10);
        stroke(color(this.myHue, 0, 0, 20));
        noFill();
        strokeWeight(this.thickness);
        line(off.x + this.a.x, off.y + this.a.y, off.x + this.b.x, off.y + this.b.y);
    };
    Segment.prototype.drawSilhoutte = function () {
        noFill();
        stroke(10);
        strokeWeight(this.thickness);
        line(this.a.x, this.a.y, this.b.x, this.b.y);
    };
    Segment.prototype.drawInner = function () {
        stroke(this.myColor);
        strokeWeight(this.thickness * 0.8);
        line(this.a.x, this.a.y, this.b.x, this.b.y);
    };
    Segment.drawCrosshairAt = function (pos, colr) {
        strokeWeight(1.8);
        stroke(colr);
        push();
        translate(pos.x, pos.y);
        line(-8, 0, 8, 0);
        line(0, -8, 0, 8);
        pop();
    };
    Segment.prototype.midPoint = function () {
        return this.a.copy().lerp(this.b, 0.5);
    };
    Segment.createRandomAt = function (id, posA, target, thicknessScale, maxThickness, len, myHue) {
        var p1 = posA.copy();
        var p2 = p1.copy().add(p5.Vector.random2D().mult(len));
        return new Segment(id, p1, p2, target, thicknessScale, maxThickness, myHue);
    };
    Segment.prototype.update = function () {
        this.seekTarget(this.target.pos());
    };
    Segment.prototype.seekTarget = function (targetPos) {
        var deltaToTarget = targetPos.copy().sub(this.a);
        this.deltaToTarget = deltaToTarget;
        this.a = targetPos.copy().add(deltaToTarget
            .copy()
            .normalize()
            .mult(-this.len));
        this.b = targetPos.copy();
    };
    return Segment;
}());
var Tentacle = (function () {
    function Tentacle(numSegments, fullLength, maxThickness, baseHueOf100, provideTarget) {
        var _this = this;
        var myHue = random(baseHueOf100 - 5, baseHueOf100 + 5);
        var avgSegmentLength = fullLength / numSegments;
        this.provideTarget = provideTarget;
        var prevPos = createVector(random(width * 0.4, width * 0.6), height * 1.1);
        this.segments = collectDistributedBetween(numSegments, 0, 0.9, function (thickness, ix) {
            var segment = Segment.createRandomAt("Seg" + ix, prevPos, null, 1 - thickness, maxThickness, avgSegmentLength, myHue);
            prevPos = segment.b.copy();
            return segment;
        });
        this.segments[0].isFixed = true;
        var thinnerSegment = null;
        this.segments.reverse().forEach(function (seg) {
            seg.target = thinnerSegment ? thinnerSegment : _this.provideTarget;
            thinnerSegment = seg;
        });
        this.segments.reverse();
    }
    Tentacle.prototype.lastSegment = function () {
        return this.segments.length > 0
            ? this.segments[this.segments.length - 1]
            : undefined;
    };
    Tentacle.prototype.firstSegment = function () {
        return this.segments.length > 0 ? this.segments[0] : undefined;
    };
    Tentacle.prototype.setNewTargetProvider = function (givenTargetProvider) {
        this.provideTarget = givenTargetProvider;
        this.lastSegment().target = givenTargetProvider;
    };
    Tentacle.prototype.update = function () {
        var originalLockedPos = this.segments[0].a.copy();
        this.segments.reverse();
        for (var _i = 0, _a = this.segments; _i < _a.length; _i++) {
            var s = _a[_i];
            s.update();
        }
        this.segments.reverse();
        var moveBackDelta = originalLockedPos
            .copy()
            .sub(this.segments[0].a.copy());
        this.segments.forEach(function (s) { return s.translate(moveBackDelta); });
    };
    Tentacle.prototype.draw = function () {
        if (appOptions.shouldDrawShadows) {
            for (var _i = 0, _a = this.segments; _i < _a.length; _i++) {
                var s = _a[_i];
                s.drawShadow();
            }
        }
        for (var _b = 0, _c = this.segments; _b < _c.length; _b++) {
            var s = _c[_b];
            s.drawSilhoutte();
        }
        for (var _d = 0, _e = this.segments; _d < _e.length; _d++) {
            var s = _e[_d];
            s.drawInner();
        }
    };
    return Tentacle;
}());
function randomScreenPosition() {
    return createVector(random(width), random(height));
}
function centerScreenPos() {
    return createVector(width / 2, height / 2);
}
function randomInt(min, max) {
    return round(random(min, max));
}
function translateToVec(pos) {
    translate(pos.x, pos.y);
}
function rotateVertexAround(vertex, rotOrigin, angleRad) {
    return vertex
        .copy()
        .sub(rotOrigin)
        .rotate(angleRad)
        .add(rotOrigin);
}
function minBy(list, fn) {
    if (list.length < 0) {
        return undefined;
    }
    var recordItem = list[0];
    var recordWeight = fn(list[0]);
    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
        var item = list_1[_i];
        var weight = fn(item);
        if (weight > recordWeight) {
            recordWeight = weight;
            recordItem = item;
        }
    }
    return recordItem;
}
function repeat(num, fn) {
    for (var i = 0; i < num; i++) {
        fn(i);
    }
}
function distributeUpTo(total, max, fn) {
    repeat(total, function (ix) {
        var val = (ix * max) / total;
        return fn(val);
    });
}
function collectDistributedBetween(numSamples, min, max, fn) {
    var result = [];
    distributeBetween(numSamples, min, max, function (v, ix) { return result.push(fn(v, ix)); });
    return result;
}
function distributeBetween(numSamples, min, max, fn) {
    repeat(numSamples, function (ix) {
        var range = max - min;
        var val = min + (ix * range) / numSamples;
        return fn(val, ix);
    });
}
function averageVectors(vs) {
    if (vs.length < 1) {
        return createVector(0, 0);
    }
    return vs.reduce(function (v1, v2) { return v1.copy().add(v2); }, vs[0]).div(vs.length);
}
function randomBoolean() {
    return Math.random() > 0.5;
}
function mousePosAsVector() {
    return createVector(mouseX, mouseY);
}
function collect(n, fn) {
    var res = [];
    for (var i = 0; i < n; i++) {
        res.push(fn(i));
    }
    return res;
}
p5.disableFriendlyErrors = true;
var defaultAppOptions = {
    shouldDrawShadows: true
};
var appOptions = defaultAppOptions;
var gNumTentacles = 5;
var gTentacles = [];
var gCanvas;
var lovecraftQuotes = [
    "It was not meant that we should voyage far",
    "A mountain walked or stumbled",
    "In his house at R'lyeh, dead Cthulu waits dreaming"
];
function randomAppOptions() {
    return {
        shouldDrawShadows: randomBoolean()
    };
}
function mouseHasMoved() {
    return dist(pmouseX, pmouseY, mouseX, mouseY) > 0;
}
function mousePosPlusNoise(phase) {
    var amp = map(sin(frameCount / 20), -1, 1, 10, 40);
    var offsetX = map(noise(3 * phase + frameCount / 20), 0, 1, -amp, amp);
    var offsetY = map(noise(4 * phase + frameCount / 20), 0, 1, -amp, amp);
    return mousePosAsVector().add(createVector(offsetX, offsetY));
}
function makeTargetProvider(phase) {
    var perlinNoisePosition = makePerlinNoisePosFn(phase);
    return { pos: function () { return mouseHasMoved() ? mousePosPlusNoise(phase) : perlinNoisePosition(); } };
}
function makePerlinNoisePosFn(phase) {
    return function () {
        return createVector(map(noise(phase + frameCount / 100), 0, 1, width / 2 - height * 0.3, width / 2 + height * 0.3), height * noise(88888 + phase + frameCount / 100));
    };
}
function rebuildTentacles() {
    var baseHue = random(100);
    gTentacles = collect(gNumTentacles, function (ix) {
        var targetProvider = makeTargetProvider(ix * 1000);
        return new Tentacle(200, height, random(80, 100), baseHue, targetProvider);
    });
}
function toggleShouldCastShadows() {
    appOptions.shouldDrawShadows = !appOptions.shouldDrawShadows;
}
function mousePressed() {
    rebuildTentacles();
}
function keyPressed() {
    if (key == "s") {
        toggleShouldCastShadows();
    }
    if (key == " ") {
        catchAllTargetWords();
    }
}
function catchAllTargetWords() {
    var elemsToCatch = findTargetWords();
    elemsToCatch.forEach(function (elem, ix) {
        catchTargetElem(elem, gTentacles[ix]);
    });
}
function windowResized() {
    resizeCanvas(windowWidth, windowHeight);
}
function setup() {
    gCanvas = createCanvas(windowWidth, windowHeight);
    gCanvas.parent(document.body);
    gCanvas.style("z-index", "-1");
    gCanvas.position(0, 0);
    gCanvas.style("display", "block");
    rebuildTentacles();
}
function update() {
    var targetWords = findTargetWords();
    if (keyIsDown(67)) {
        gTentacles[0].setNewTargetProvider({
            pos: function () { return getPosOfTargetWord(targetWords[0]).pos; }
        });
    }
    gTentacles.forEach(function (t) {
        t.update();
        if (t.heldWord) {
            moveHeldWordTo(t.heldWord, t.lastSegment().b);
            rotateHeldWord(t.heldWord.elem, t.lastSegment().getAngle());
        }
    });
}
function rotateHeldWord(elem, heading) {
    elem.style.transform = "rotate(" + degrees(heading + 90) + "deg)";
}
function draw() {
    update();
    background(0);
    fill("black");
    noStroke();
    gTentacles.forEach(function (t) { return t.draw(); });
}
function getPosOfTargetWord(el) {
    var b = el.getBoundingClientRect();
    return {
        left: b.left,
        right: b.right,
        top: b.top,
        bottom: b.bottom,
        width: b.width,
        height: b.height,
        pos: createVector(b.left + b.width / 2, b.top + b.height / 2)
    };
}
function moveHeldWordTo(heldWord, newPos) {
    var elem = heldWord.elem;
    var boundsInfo = heldWord.originalPosAndBounds;
    boundsInfo.width;
    elem.style.left = newPos.x - boundsInfo.width / 2 + "px";
    elem.style.top = newPos.y - boundsInfo.height / 2 + "px";
}
function findTargetWords() {
    return Array.from(document.getElementsByClassName("wordtoeat"));
}
function makeAnimatingTargetProvider(startPos) {
    var isRetreating = true;
    var tgtPos = createVector(random(width * 0.3, width * 0.6), height * 1);
    var animLength = 100;
    var animFrameCount = 0;
    return {
        pos: function () {
            var currPos = startPos.copy().lerp(tgtPos, animFrameCount / animLength);
            if (isRetreating) {
                if (tgtPos.dist(currPos) < 10) {
                    isRetreating = false;
                    animFrameCount = 0;
                    startPos = tgtPos.copy();
                    tgtPos = createVector(random(width * 0.3, width * 0.6), height * 0.3);
                }
            }
            animFrameCount++;
            return currPos;
        }
    };
}
function catchTargetElem(elem, tentacle) {
    var targetElem = elem;
    var clone = targetElem.cloneNode(true);
    targetElem.style.visibility = "hidden";
    document.body.append(clone);
    clone.classList.add("caught");
    gTentacles.forEach(function (t) {
        var targetProvider = makeAnimatingTargetProvider(t.lastSegment().b.copy());
        t.setNewTargetProvider(targetProvider);
    });
    tentacle.heldWord = {
        elem: clone,
        originalPosAndBounds: getPosOfTargetWord(clone)
    };
}
//# sourceMappingURL=data:application/json;base64,